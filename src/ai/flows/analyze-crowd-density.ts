// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Analyzes real-time camera feeds to estimate crowd density and identify potential overcrowding.
 *
 * - analyzeCrowdDensity - A function that handles the crowd density analysis process.
 * - AnalyzeCrowdDensityInput - The input type for the analyzeCrowdDensity function.
 * - AnalyzeCrowdDensityOutput - The return type for the analyzeCrowdDensity function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeCrowdDensityInputSchema = z.object({
  location: z.string().describe('The location of the camera feed.'),
  peopleCount: z.number().describe('The number of people detected in the camera feed.'),
  threshold: z.number().describe('The safety threshold for the location.'),
});
export type AnalyzeCrowdDensityInput = z.infer<typeof AnalyzeCrowdDensityInputSchema>;

const AnalyzeCrowdDensityOutputSchema = z.object({
  alert: z.string().describe('The alert message for authorities.'),
  severity: z.enum(['low', 'medium', 'high']).describe('The severity level of the overcrowding.'),
  recommendation: z.string().describe('The recommendation for authorities.'),
});
export type AnalyzeCrowdDensityOutput = z.infer<typeof AnalyzeCrowdDensityOutputSchema>;

export async function analyzeCrowdDensity(input: AnalyzeCrowdDensityInput): Promise<AnalyzeCrowdDensityOutput> {
  return analyzeCrowdDensityFlow(input);
}

const assessSeverityTool = ai.defineTool({
  name: 'assessSeverity',
  description: 'Assess the severity of overcrowding based on people count, threshold, and location.',
  inputSchema: z.object({
    peopleCount: z.number().describe('The number of people detected.'),
    threshold: z.number().describe('The safety threshold for the location.'),
    location: z.string().describe('The location of the overcrowding.'),
  }),
  outputSchema: z.enum(['low', 'medium', 'high']),
}, async (input) => {
  const {peopleCount, threshold, location} = input;
  const excess = peopleCount - threshold;

  if (excess > threshold * 0.5) {
    return 'high';
  } else if (excess > threshold * 0.2) {
    return 'medium';
  } else {
    return 'low';
  }
});

const generateRecommendationTool = ai.defineTool({
  name: 'generateRecommendation',
  description: 'Generates a recommendation for authorities based on the severity of the overcrowding.',
  inputSchema: z.object({
    severity: z.enum(['low', 'medium', 'high']).describe('The severity level of the overcrowding.'),
    location: z.string().describe('The location of the overcrowding.'),
  }),
  outputSchema: z.string(),
}, async (input) => {
  const {severity, location} = input;
  switch (severity) {
    case 'high':
      return `Divert new visitors away from ${location} and dispatch a security team.`;
    case 'medium':
      return `Monitor the crowd density at ${location} and prepare to divert visitors.`;
    case 'low':
      return `Continue monitoring crowd density at ${location}.`;
    default:
      return `No recommendation available for the crowd density at ${location}.`;
  }
});

const prompt = ai.definePrompt({
  name: 'analyzeCrowdDensityPrompt',
  tools: [assessSeverityTool, generateRecommendationTool],
  input: {schema: AnalyzeCrowdDensityInputSchema},
  output: {schema: AnalyzeCrowdDensityOutputSchema},
  prompt: `You are an AI safety assistant for a Smart City system.

You will receive live camera counts and descriptions of crowd density.
If the number of people exceeds a safety threshold, you must generate a short, clear alert message for authorities.

Use the assessSeverity tool to determine the severity of the overcrowding.
Use the generateRecommendation tool to formulate a recommendation for authorities based on the severity.

Location: {{{location}}}
People Count: {{{peopleCount}}}
Threshold: {{{threshold}}}


{
  "alert": "Overcrowding detected at {{{location}}} with {{{peopleCount}}} people (threshold {{{threshold}}}).",
  "severity": {{tools.assessSeverity peopleCount=peopleCount threshold=threshold location=location}},
  "recommendation": {{tools.generateRecommendation severity=(tools.assessSeverity peopleCount=peopleCount threshold=threshold location=location) location=location}}
}
`,
});

const analyzeCrowdDensityFlow = ai.defineFlow(
  {
    name: 'analyzeCrowdDensityFlow',
    inputSchema: AnalyzeCrowdDensityInputSchema,
    outputSchema: AnalyzeCrowdDensityOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
