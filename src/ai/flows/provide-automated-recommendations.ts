// src/ai/flows/provide-automated-recommendations.ts
'use server';

/**
 * @fileOverview Generates automated recommendations for city authorities based on alert severity.
 *
 * - generateRecommendation - A function that generates a recommendation based on the alert and other available context.
 * - RecommendationInput - The input type for the generateRecommendation function.
 * - RecommendationOutput - The return type for the generateRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendationInputSchema = z.object({
  alert: z.string().describe('The alert message generated by the system.'),
  severity: z.enum(['low', 'medium', 'high']).describe('The severity level of the alert.'),
  location: z.string().describe('The location where the alert was triggered.'),
  peopleCount: z.number().describe('The number of people at the location.'),
  threshold: z.number().describe('The safety threshold for the location.'),
});
export type RecommendationInput = z.infer<typeof RecommendationInputSchema>;

const RecommendationOutputSchema = z.object({
  recommendation: z.string().describe('The recommended action for the authorities to take.'),
});
export type RecommendationOutput = z.infer<typeof RecommendationOutputSchema>;

export async function generateRecommendation(input: RecommendationInput): Promise<RecommendationOutput> {
  return generateRecommendationFlow(input);
}

const recommendationPrompt = ai.definePrompt({
  name: 'recommendationPrompt',
  input: {schema: RecommendationInputSchema},
  output: {schema: RecommendationOutputSchema},
  prompt: `You are an AI assistant providing recommendations to city authorities based on the severity of alerts.

  Based on the following alert information, generate a concise and actionable recommendation for the authorities.

  Alert: {{{alert}}}
  Severity: {{{severity}}}
  Location: {{{location}}}
  People Count: {{{peopleCount}}}
  Threshold: {{{threshold}}}

  Recommendation:`,
});

const generateRecommendationFlow = ai.defineFlow(
  {
    name: 'generateRecommendationFlow',
    inputSchema: RecommendationInputSchema,
    outputSchema: RecommendationOutputSchema,
  },
  async input => {
    const {output} = await recommendationPrompt(input);
    return output!;
  }
);
